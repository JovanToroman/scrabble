{"version":3,"sources":["app/ui.cljs"],"mappings":"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","names":["options__44904__auto__","p__52671","map__52672","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.components/wrapped-render","map__52674","com.fulcrologic.fulcro.components/props","js/app","js/app.ui","js/app.ui.Scramble","props__44905__auto__","this__44906__auto__","temp__5733__auto__","init-state__44907__auto__","obj52678","G__52679","G__52680","goog.object/get","obj52682","com.fulcrologic.fulcro.components/configure-component!","app.ui/Scramble","this","str1","str2","answer","error","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","p1__52669#","or__4131__auto__","com.fulcrologic.fulcro.mutations.set_string_BANG_.cljs$core$IFn$_invoke$arity$variadic","p1__52670#","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2","G__52676","app.mutations/scramble"],"sourcesContent":["(ns app.ui\r\n  (:require\r\n   [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\r\n   [com.fulcrologic.fulcro.dom :refer [div button input h1 p h3 i label h4 h5]]\r\n   [com.fulcrologic.fulcro.mutations :as m]\r\n   [app.mutations :as mut]))\r\n\r\n(defsc Scramble [this {:ui/keys [str1 str2 answer error]}]\r\n  {:ident (fn [] [:scramble/id :scramble1])\r\n   :query [:ui/str1\r\n           :ui/str2\r\n           :ui/answer\r\n           :ui/error]}\r\n  (div :.container.mt-4\r\n       (div :.row\r\n            (h1 :.text-justify \"Hi! Welcome to the scramble tester\")\r\n            (p :.lead \"Please enter two strings in the form fields bellow. Strings need to be lowercase and contain only\r\n            letters. You can then check if the second string can be created by rearranging letters of the first one. \"\r\n               (i \"Have fun!\")))\r\n       (div :.row.col-md-4\r\n            (label :.mt-3 \"String 1\")\r\n            (input :.form-control {:type \"text\" :value (or str1 \"\") :onChange #(m/set-string! this :ui/str1 :event %)})\r\n            (label :.mt-3 \"String 2\")\r\n            (input :.form-control {:type \"text\" :value (or str2 \"\") :onChange #(m/set-string! this :ui/str2 :event %)})\r\n            (button :.btn.btn-primary.mt-3 {:onClick #(comp/transact! this [(mut/scramble {:str1 (or str1 \"\")\r\n                                                                                           :str2 (or str2 \"\")})])}\r\n                    \"Scramble\"))\r\n       (div :.row.col-md-8.mt-3\r\n            (when (some? error)\r\n              (div (h4 \"Scramble failed with the following error: \")\r\n                   (h5 :.text-danger error))))\r\n       (div :.row.col-md-8\r\n            (when (some? answer)\r\n              (if answer\r\n                (h3 :.text-success \"String 2 can be created from letters in string 1\")\r\n                (h3 :.text-danger \"String 2 cannot be created from letters in string 1\"))))))\r\n"]}