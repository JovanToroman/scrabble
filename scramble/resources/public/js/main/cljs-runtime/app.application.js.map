{"version":3,"sources":["app/application.cljs"],"mappings":";;;;;AAMA,AAAA,AAAAA,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACWM;AADX,AAEE,AAAM,AAACC,AAAKD;AAAZ,AACE,AAAME,AAAO,AAACC,AAAKH;AAAnB,AACE,AAACI,AACA;AAAKC,AAAOC;AAAZ,AACE,AAAI,AACC,AAAK,AAACL,AAAKK,AAAG,AAAA,AAACC,AAAU,AAACC,AAAI,AAACC,AAAKH,AACpC,AAAA,AAACI,AAAEJ;AACN,AAAA,AAACK;;AACDN;;;AANL,AAQCH;;AAVL;;;AAYF,AAAA,AAAMU,AACHC;AADH,AAEE,AAAAC,AAAI,AAACC,AAA0BF;AAA/B,AAAA,AAAAC;AAAAA;;AAAuC,AAACf,AAAwBc;;;AAElE,AAAA,AAAAG,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AACyB,AAAA,AAACC,AACVT","names":["p__52651","map__52652","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","app.application/contains-pathom-errors?","body","cljs.core/map?","values","cljs.core/vals","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","error?","v","cljs.core/contains?","cljs.core/set","cljs.core/keys","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/reduced","app.application/remote-error?","result","or__4131__auto__","com.fulcrologic.fulcro.application/default-remote-error?","js/app","js/app.application","js/app.application.app","app.application/app","com.fulcrologic.fulcro.application.fulcro_app.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.networking.http-remote/fulcro-http-remote"],"sourcesContent":["(ns app.application\r\n  (:require\r\n   [com.fulcrologic.fulcro.application :as app]\r\n   [com.wsscode.pathom.core :as p]\r\n   [com.fulcrologic.fulcro.networking.http-remote :as http]))\r\n\r\n(defn contains-pathom-errors?\r\n  [{:keys [body]}]\r\n  (when (map? body)\r\n    (let [values (vals body)]\r\n      (reduce\r\n       (fn [error? v]\r\n         (if (or\r\n              (and (map? v) (contains? (set (keys v)) ::p/error))\r\n              (= v ::p/error))\r\n           (reduced true)\r\n           error?))\r\n       false\r\n       values))))\r\n\r\n(defn remote-error?\r\n  [result]\r\n  (or (app/default-remote-error? result) (contains-pathom-errors? result)))\r\n\r\n(defonce app (app/fulcro-app\r\n              {:remotes       {:remote (http/fulcro-http-remote {})}\r\n               :remote-error? remote-error?}))"]}